// Copyright (c) 2024 by Rochus Keller <mailto:me@rochus-keller.ch>
// 
// GNU General Public License Usage
// This file may be used under the terms of the GNU General Public
// License (GPL) versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the file LICENSE.GPL included in
// the packaging of this file. Please review the following information
// to ensure GNU General Public Licensing requirements will be met:
// http://www.fsf.org/licensing/licenses/info/GPLv2.html and
// http://www.gnu.org/copyleft/gpl.html.

Micron ::=  module

ident ::= // ( letter | '_' ) {letter | digit | '_'}

integer ::= // digit {digit} | digit {hexDigit} 'H'

real ::= // digit {digit} '.' {digit} ['E' ['+' | '-'] digit {digit}]

number ::= integer | real

string ::= // '"' {character} '"' | digit {hexDigit} 'X', also multiline hex strings $ ... $ seen in PO source
hexchar ::=
hexstring ::=

comment- ::= '(*' '*)' '//'
Comment ::=
directive- ::= '<*' '*>' // oadkwood source code directive

hexstringdelim- ::= '$'

qualident ::= [ \LL:2\ ident '.' ] ident  

identdef ::= ident [ '*' | '-' ] 

ConstDeclaration ::= identdef '=' ConstExpression

ConstExpression ::= expression

TypeDeclaration ::= identdef 	'=' type

type ::= NamedType | ArrayType | RecordType | PointerType | ProcedureType | enumeration

NamedType ::= qualident

ArrayType ::= 'ARRAY' [ length ] 'OF' type | '[' [ length ] ']' type

length ::= ConstExpression | 'VAR' expression

RecordType ::= 'RECORD' [FixedPart] [VariantPart]  'END' 
         
inline_ ::= 'INLINE' | 'IN'
       
VariantPart ::= 'CASE' { ['|'] [inline_] identdef ':' type } 

FixedPart ::= FieldList  [ ';' ] { FieldList [ ';' ] }

FieldList ::= IdentList ':' type 
            | inline_ identdef ':' type 

IdentList ::= identdef { [','] identdef}

PointerType ::= ('POINTER' 'TO' | '^') type // any type in Micron, also simple or procedure types

enumeration ::= '(' ( constEnum | symbolEnum ) ')'                       
constEnum ::= ident [ '=' ConstExpression ] { [','] ident }
symbolEnum ::=  ':' ident { [','] ':' ident } // corresponds to const char* ident = "module.ident" in C; ident is of type SYMBOL

VariableDeclaration ::= IdentList ':' type

designator ::= qualident {selector}

selector ::= '.' ident | '[' expression ']' | '^'  | '(' [ ExpList ] ')' 

ExpList ::= expression {',' expression}

expression ::= SimpleExpression [ relation SimpleExpression ]

relation ::= '=' | '#' | '<' | '<=' | '>' | '>=' | 'IN'

SimpleExpression ::= ['+' | '-'] term { AddOperator term }

AddOperator ::= '+' | '-' | 'OR'

term ::= factor {MulOperator factor}

MulOperator ::= '*' | '/' | 'DIV' | 'MOD' | '&'

literal ::= number | string | hexstring | hexchar | 'NIL' | set | 'TRUE' | 'FALSE'

constructor ::= NamedType '{' [ component {',' component} ] '}' // for arrays, records or fixed address pointers

component ::= ConstExpression

factor ::= 
        \LA: 1:ident & 2:'{'\ constructor
        | literal
	| variableOrFunctionCall // replaces: designator [ActualParameters]
	| '(' expression ')' 
	| '~' factor // negation
	| '@' designator // address of operator

variableOrFunctionCall ::= designator // designator includes [ ActualParameters ] 
	
set ::= '{' [ element {',' element} ] '}'

element ::= expression ['..' expression]

statement ::= assignmentOrProcedureCall
	| IfStatement | CaseStatement |
	LoopStatement |
	ExitStatement | GotoStatement |
	ReturnStatement |
	WhileStatement | RepeatStatement | ForStatement

assignmentOrProcedureCall ::= designator  [
		':=' expression ] // assignment 
		// designator enth√§lt neu auch Params: | [ ActualParameters ] // ProcedureCall

StatementSequence ::=  { ';' } { [ \LA: 1:ident & 2:':'\ gotoLabel ] statement { ';' } }  

gotoLabel ::= ident ':'

GotoStatement ::= 'GOTO' ident

IfStatement ::= 'IF' expression 'THEN' StatementSequence { ElsifStatement }
	[ ElseStatement ] 'END'
ElsifStatement ::= 'ELSIF' expression 'THEN' StatementSequence 
ElseStatement ::= 'ELSE' StatementSequence

CaseStatement ::= 'CASE' expression 'OF' [Case] { '|' Case }
	[ 'ELSE' StatementSequence ] 'END' // no type case in Micron

Case ::= [ CaseLabelList ':' StatementSequence ]

CaseLabelList ::= LabelRange { ',' LabelRange }

LabelRange ::= label [ '..' label ]

label ::= ConstExpression

WhileStatement ::= 'WHILE' expression 'DO' StatementSequence {ElsifStatement2} 'END'
ElsifStatement2 ::= 'ELSIF' expression 'DO' StatementSequence 

RepeatStatement ::= 'REPEAT' StatementSequence 'UNTIL' expression

ForStatement ::= 'FOR' ident ':=' expression 'TO' expression [ 'BY' ConstExpression ]
	'DO' StatementSequence 'END'
	
// no WithStatement in Micron

LoopStatement ::= 'LOOP' StatementSequence 'END'

ExitStatement ::= 'EXIT'

procedure ::= 'PROCEDURE' | 'PROC'

ProcedureType ::= procedure [FormalParameters] 
	
ProcedureDeclaration ::= 
	  \LL:2\ procedure '^' identdef [ FormalParameters ] ['INLINE'|'INVAR'|'EXTERN']
	| \LA: 1:('PROCEDURE' | 'PROC')&(3:'='|4:'=')\ procedure identdef '=' qualident
	|  ProcedureHeading ( ['INLINE'| 'INVAR'] [ ';' ] ProcedureBody | \LL:2\ [ ';' ] 'EXTERN' [ident] )
	
ProcedureHeading ::= procedure identdef [ FormalParameters ]  // no receivers in Micron

block ::= 'BEGIN' StatementSequence

ProcedureBody ::= DeclarationSequence block 'END' ident
	
DeclarationSequence ::= 
	{ 'CONST' { ConstDeclaration [';'] } 
	| 'TYPE' { TypeDeclaration [';'] } 
	| 'VAR' { VariableDeclaration [';'] } 
	| ProcedureDeclaration [';'] }

ReturnStatement ::= 'RETURN' 
	[ expression ] // leads to LL(k) ambig with qualident statement; resolve by checking if proc has return type

FormalParameters ::= '(' [ FPSection { \LA: 1:ident | 2:ident\ [';'] FPSection } [ [';'] '..'] ]  ')' [ ':' ReturnType ]

ReturnType ::= [POINTER TO | '^'] NamedType

FPSection ::= ident { [','] ident } ':' FormalType 

FormalType ::= type

module ::= 'MODULE' ident [ MetaParams ] [';'] 
	{ ImportList | DeclarationSequence }
	[ block ] 'END' ident ['.'] 
	
ImportList ::= 'IMPORT' import { [ ',' ] import } [';']

import ::= [ \LL:2\ ident ':=' ] ident 
	{ '.' ident } // NOTE: paths are not case sensitive 
	[ MetaActuals ] 

MetaActuals ::= '(' ConstExpression { [','] ConstExpression } ')' 

MetaParams ::= '(' MetaSection { [';'] MetaSection } ')'

MetaSection ::= 'CONST' ident { \LL:2\ [','] ident } ':' NamedType | [ 'TYPE' ] ident { \LL:2\ [','] ident }

/// Pragmas
%module ::= 'Micron'
%namespace ::= 'Mic'
%suppress ::= ';' ',' '.' ':'

%no_syntree ::= 'true'

